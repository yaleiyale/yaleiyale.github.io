<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>学研笔记 on 时砂凝几页</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/</link><description>Recent content in 学研笔记 on 时砂凝几页</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright> 2021-{year} yaleiyale</copyright><lastBuildDate>Tue, 15 Nov 2022 08:13:37 +0800</lastBuildDate><atom:link href="http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>单链表</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/</guid><description>定义 每个结点除了存放数据元素外，还要存储指向下一个节点的指针 typedef struct LNode { int data; LNode* next; } LNode, * LinkedList; // LinkedList表示LNode型指针，等价于LNo</description></item><item><title>队列</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E9%98%9F%E5%88%97/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E9%98%9F%E5%88%97/</guid><description>定义 队列是只允许在一端进行插入，另一端进行删除的 [[线性表]] 特点 先进先出 1 基本操作 InitQueue(&amp;amp;Q): 初始化队列，构造一个空队列 Q DestroyQueue(&amp;amp;Q): 销毁队列。销毁并释放队列</description></item><item><title>队列的应用</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/</guid><description>队列的应用 树的层次遍历 图的广度优先遍历 操作系统中的先来先服务策略：cpu 调度；打印数据缓存区</description></item><item><title>二叉树的遍历</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</guid><description>先序遍历 先序遍历（PreOrder）的操作过程如下。 若二叉树为空，则什么也不做;否则， 访问根结点; 先序遍历左子树; 先序遍历右子树。 void PreOrder(BiTree T) { if</description></item><item><title>二叉树的存储结构</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</guid><description>顺序存储 struct TreeNode { int value; bool isEmpty; }; // 定义一个长度为MAXSIZE的数组t,按照从上至下、从左至右的顺序依次存储完全二叉树中的各个结点 TreeNode t[MAXSIZE]; 初始化时所有结</description></item><item><title>二叉树的定义与基本术语</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD/</guid><description>基础概念 二叉树是n(n≥0)个结点的有限集合： 或者为空二叉树，即n=0。 或者由一个根结点和两个互不相交的被称为根的左子树和右子树组成。左子树</description></item><item><title>二叉树的性质</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8/</guid><description>设非空二叉树中度为0、1和2的结点个数分别为$n_0$、$n_1$和$n_2$,则$n_0$=$n_2$+1 (叶子结点比二分支结点多一个)1</description></item><item><title>静态链表</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/</guid><description>定义 数组形式实习的链表 typedef struct Node { int data; int next; } SLinkedList[MaxSize]; // SLinkedList等价于Node[MaxSize] 基本操作 初始化 bool InitSLinkedList(SLinkedList&amp;amp; L) { L[0].next = -1; //-1表示表</description></item><item><title>矩阵的压缩存储</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8/</guid><description>普通矩阵可用二维数组存储 (直接存储) 某些特殊矩阵可以压缩存储空间 flowchart LR 特殊矩阵===对称矩阵 &amp;amp; 三角矩阵 &amp;amp; 三对角矩阵 &amp;amp; 稀疏矩阵 subgraph one[ ] 对称矩阵 &amp;amp; 三</description></item><item><title>链表</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%93%BE%E8%A1%A8/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%93%BE%E8%A1%A8/</guid><description>链表 [[单链表]] [[双链表]] [[循环链表]] 有 [[循环链表#循环单链表]] 和 [[循环链表#循环双链表]] [[静态链表]] 较少考察</description></item><item><title>链式队列</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E9%93%BE%E5%BC%8F%E9%98%9F%E5%88%97/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E9%93%BE%E5%BC%8F%E9%98%9F%E5%88%97/</guid><description>定义 typedef struct LinkedNode { int data; LinkedNode* next; } LinkedNode; typedef struct LinkedQueue { LinkedNode* front, * rear; } LinkedQueue; 带头结点 初始化 void InitLinkedQueue(LinkedQueue&amp;amp; Q) { Q.front = Q.rear = (LinkedNode*)malloc(sizeof(LinkedNode)); if (nullptr == Q.front || nullptr == Q.rear) return; Q.front-&amp;gt;next = nullptr; } 判空 bool IsEmtpy(LinkedQueue Q) { if (Q.front == Q.rear) return true; return false; } 入队 void EnLinkedQueue(LinkedQueue&amp;amp;</description></item><item><title>链栈</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E9%93%BE%E6%A0%88/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E9%93%BE%E6%A0%88/</guid><description>定义 与 [[单链表#定义]] 没有本质区别 typedef struct LNode { int data; LNode* next; } LNode, * LinkedStack; 基本操作 注意操作与单链表操作相比，链栈操作都是在栈顶进行 参考 ![[单链表#基本</description></item><item><title>朴素模式匹配算法</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2/%E6%9C%B4%E7%B4%A0%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2/%E6%9C%B4%E7%B4%A0%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</guid><description>定义 主串：匹配范围 模式串：匹配方向 字符串模式匹配：在主串中找到与模式串相同的子串，并返回其所在位置。 主串长度为n,模式串长度为m。朴素模式匹</description></item><item><title>树的定义与基本术语</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD/</guid><description>概念 ![[树与二叉树 2022-10-06 14.36.30.excalidraw]] 树是n(n≥0)个结点的有限集合，n=0时，称为空树，这是一种特殊情况。非空树的特性： 有且仅有一个根结点 没有后继的结</description></item><item><title>树的性质</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8/</guid><description>总结点数 = 总度数 + 11 树的度 VS m叉树 树的度：各结点的度的最大值 m叉树：每个结点最多只能有m个孩子的树 度为m的树 m叉树 任意结点的度≤m(最多m个</description></item><item><title>树与二叉树</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>[[树的定义与基本术语]] [[树的性质]] [[二叉树的定义与基本术语]] [[二叉树的性质]] [[二叉树的存储结构]] [[二叉树的遍历]] [[</description></item><item><title>双端队列</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</guid><description>双端队列 双端队列：只允许从两端插入、两端删除的线性表 输入受限的双端队列：只允许从一端插入、两端删除的线性表 输出受限的双端队列：只允许从两端插</description></item><item><title>双链表</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8F%8C%E9%93%BE%E8%A1%A8/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8F%8C%E9%93%BE%E8%A1%A8/</guid><description>定义 typedef struct DNode { int data; DNode* prior, * next; } DNode, * DLinkedList; 初始化 bool InitDLinkedList(DLinkedList&amp;amp; L) { L = (DNode*)malloc(sizeof(DNode)); if (L == nullptr) return false; L-&amp;gt;prior = nullptr; L-&amp;gt;next = nullptr; return true; } 判空 bool Empty(DLinkedList&amp;amp; L) { if (L-&amp;gt;next == nullptr) return true; return false; } 插入 bool InsertNextDNode(DNode* p, DNode* s) { if (p == nullptr || s</description></item><item><title>顺序表</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%A1%BA%E5%BA%8F%E8%A1%A8/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%A1%BA%E5%BA%8F%E8%A1%A8/</guid><description>定义 用顺序存储的方式实现的线性表。 顺序存储。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。</description></item><item><title>顺序队列</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97/</guid><description>定义 typedef struct { int data[MaxSize]; int front, rear; } SeqQueue; 基本操作 初始化 void InitQueue(SeqQueue&amp;amp; Q) { Q.rear = Q.front = 0; } 判空 bool QueueEmpty(SeqQueue Q) { if (Q.front == Q.rear) return true; return false; } 循环队列 判空 浪费一个空间区分队空队满 队满条件： (Q.rear+1)%MaxSize == Q.front</description></item><item><title>顺序栈</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E9%A1%BA%E5%BA%8F%E6%A0%88/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E9%A1%BA%E5%BA%8F%E6%A0%88/</guid><description>定义 typedef struct { int data[MaxSize]; int top; } SeqStack; 基本操作 InitStack(&amp;amp;S) : 初始化栈 void InitStack(SeqStack&amp;amp; S) { S.top = -1; } Push(&amp;amp;S,x): 进栈 bool Push(SeqStack&amp;amp; S, int x) { if (S.top == MaxSize - 1) //栈满 return false; S.top += 1; S.data[S.top] = x; return true; } Pop(&amp;amp;S,&amp;amp;x): 出栈 bool Pop(SeqStack&amp;amp; S, int&amp;amp; x) { if (S.top</description></item><item><title>线性表</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E7%BA%BF%E6%80%A7%E8%A1%A8/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid><description>定义 线性表是具有相同数据类型的 n 个数据元素的有限序列 基本操作 InitList(&amp;amp;L): 初始化表。构造空表，分配空间 DestroyList(&amp;amp;L): 销毁操作。销毁线性表，释放空间 ListInsert(&amp;amp;L,i,e): 插入操作。在表 L</description></item><item><title>绪论</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BB%AA%E8%AE%BA/%E7%BB%AA%E8%AE%BA/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BB%AA%E8%AE%BA/%E7%BB%AA%E8%AE%BA/</guid><description>基本概念 数据元素：数据元素是数据的基本单位，通常作为一个整体进行考虑和处理（编程中的对象） 数据项：一个数据元素可由若干数据项组成，数据项是构</description></item><item><title>循环链表</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</guid><description>循环单链表 定义 同单链表的定义 ![[单链表#定义]] 初始化 bool InitList(LinkedList&amp;amp; L) { L = (LNode*)malloc(sizeof(LNode)); if (L == nullptr) return false; L-&amp;gt;data = 0; L-&amp;gt;next = L; //尾结点的next域指向头指针 return true; } 判空 bool Empty(LinkedList</description></item><item><title>栈</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E6%A0%88/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E6%A0%88/</guid><description>定义 栈是只允许在一端进行插入或删除操作的 [[线性表]] 栈与与普通的线性表相比，逻辑结构相同，插入删除操作有区别 n 个不同元素进栈，出栈元素不同</description></item><item><title>栈、队列和数组</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/</guid><description>[[栈]] [[队列]] [[矩阵的压缩存储]]（数组）</description></item><item><title>栈的应用</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/</guid><description>括号匹配 #include &amp;lt;iostream&amp;gt; #define MaxSize 10 typedef struct { char data[MaxSize]; int top; } SqStack; void InitStack(SqStack&amp;amp; s) { s.top = -1; } bool StackEmpty(SqStack&amp;amp; s) { if (s.top == -1) return true; return false; } bool isIn(char&amp;amp; x, char list[], int length) { for (int i = 0; i &amp;lt; length; i++) if (x == *(list + i)) return true; return false; } //括</description></item><item><title>字符串模式匹配</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</link><pubDate>Tue, 15 Nov 2022 08:13:37 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid><description>[[朴素模式匹配算法]] [[KMP算法]]</description></item><item><title>KMP算法</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2/kmp%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 15 Nov 2022 08:13:36 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2/kmp%E7%AE%97%E6%B3%95/</guid><description>一些概念补充 前缀：除最后一个字符外，字符串的所有头部子串； 后缀：除第一个字符外，字符串的所有尾部子串； 部分匹配值：字符串的前缀与后缀的最长相</description></item><item><title>tips of cpp</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/tips-of-cpp/</link><pubDate>Tue, 15 Nov 2022 08:13:36 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/tips-of-cpp/</guid><description>关于指针 //指针可看作一个数字的容器，其中保存的是 相应类型的变量 的地址 LNode *p;//定义一个指针变量p p = (LNode *)malloc(sizeof(L</description></item><item><title>串</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2/%E4%B8%B2/</link><pubDate>Tue, 15 Nov 2022 08:13:36 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2/%E4%B8%B2/</guid><description>[[串的基本概念与实现]] [[字符串模式匹配]]</description></item><item><title>串的基本概念与实现</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2/%E4%B8%B2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link><pubDate>Tue, 15 Nov 2022 08:13:36 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2/%E4%B8%B2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid><description>术语定义 串：即字符串(String)，是由零个或多个字符组成的有限序列。 子串：串中任意个连续的字符组成的子序列。 主串：包含子串的串。 字符在主</description></item><item><title>数据结构</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Tue, 15 Nov 2022 08:13:36 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>[[绪论]] [[线性表]] [[栈、队列和数组]] [[串]] [[树与二叉树]] [[图]] [[查找]] [[排序]]</description></item><item><title>应试看板</title><link>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E5%BA%94%E8%AF%95%E7%9C%8B%E6%9D%BF/</link><pubDate>Tue, 15 Nov 2022 08:13:36 +0800</pubDate><guid>http://lestua.ml/%E5%AD%A6%E7%A0%94%E7%AC%94%E8%AE%B0/%E5%BA%94%E8%AF%95%E7%9C%8B%E6%9D%BF/</guid><description>应试看板 语言环境：cpp [[tips of cpp]] 408 科目占比 [[数据结构]]45 分 选择题题号 1-11，每题 2 分，共 22 分 大题题号 41-42，共 23 分 [[计算机组成原</description></item></channel></rss>