<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MAUI on 时砂凝几页</title><link>http://lestua.eu.org/%E5%BC%80%E5%8F%91/maui/</link><description>Recent content in MAUI on 时砂凝几页</description><generator>Hugo</generator><language>zh</language><copyright> 2021-{year} yaleiyale</copyright><lastBuildDate>Sun, 12 Feb 2023 14:45:21 +0800</lastBuildDate><atom:link href="http://lestua.eu.org/%E5%BC%80%E5%8F%91/maui/index.xml" rel="self" type="application/rss+xml"/><item><title>MAUI-资源使用</title><link>http://lestua.eu.org/notes/2023/02/12/143719/</link><pubDate>Sun, 12 Feb 2023 14:37:10 +0800</pubDate><guid>http://lestua.eu.org/notes/2023/02/12/143719/</guid><description>&lt;h1 id="可重用资源">可重用资源&lt;/h1>
&lt;p>打开 &lt;code>App.xaml&lt;/code> 文件。 这里为我们在整个应用程序中使用的一些基本颜色和样式提前配置。 例如，我们为主背景色定义了一种浅色：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Color&lt;/span> &lt;span style="color:#a6e22e">x:Key=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;LightBackground&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>#FAF9F8&lt;span style="color:#f92672">&amp;lt;/Color&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以后任何 UI 元素或可重用的共享样式都可以引用它。 例如，我们的 &lt;code>ButtonOutline&lt;/code> 样式应用于 &lt;code>Button&lt;/code> 控件并为其赋予圆角，为文本、边框和背景设置颜色：&lt;/p></description></item><item><title>MAUI-访问平台特性</title><link>http://lestua.eu.org/notes/2023/02/08/214243/</link><pubDate>Wed, 08 Feb 2023 21:42:36 +0800</pubDate><guid>http://lestua.eu.org/notes/2023/02/08/214243/</guid><description>&lt;h1 id="跨平台api">跨平台API&lt;/h1>
&lt;p>.NET MAUI 通过单个 API 提供 60 多个平台功能，例如：打开默认地图应用程序&lt;/p>
&lt;p>将 &lt;code>IMap&lt;/code> 注入到我们的 &lt;code>Monkey Details ViewModel&lt;/code> 中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span> IMap map; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> MonkeyDetailsViewModel(IMap map) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.map = map; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>打开 &lt;code>MonkeyDetailsViewModel.cs&lt;/code> 文件并添加一个名为 &lt;code>OpenMap&lt;/code> 的方法，该方法调用 &lt;code>Map&lt;/code> API，将猴子的位置传递给它：&lt;/p></description></item><item><title>MAUI-导航</title><link>http://lestua.eu.org/notes/2023/02/08/211301/</link><pubDate>Wed, 08 Feb 2023 21:12:49 +0800</pubDate><guid>http://lestua.eu.org/notes/2023/02/08/211301/</guid><description>&lt;h1 id="导航时viewmodel的生成">导航时ViewModel的生成&lt;/h1>
&lt;p>使用&lt;em>QueryProperty&lt;/em>特性来处理查询的数据传递以生成一个详情页所需的viewModel&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[QueryProperty(nameof(Monkey), &amp;#34;Monkey&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">partial&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MonkeyDetailsViewModel&lt;/span> : BaseViewModel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> MonkeyDetailsViewModel()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [ObservableProperty]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Monkey monkey;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以使用相同的机制传递一个完整的&lt;strong>对象&lt;/strong>：&lt;/p></description></item><item><title>MAUI-MVVM与数据绑定</title><link>http://lestua.eu.org/notes/2022/09/05/223237/</link><pubDate>Mon, 05 Sep 2022 22:28:08 +0800</pubDate><guid>http://lestua.eu.org/notes/2022/09/05/223237/</guid><description>&lt;h1 id="感知数据变化">感知数据变化&lt;/h1>
&lt;p>MVVM中一个重要的实践价值是视图能够感知数据的变化。手工的传统写法繁琐臃肿，&lt;em>NET Community Toolkit&lt;/em> 通过源生成器来简化 MVVM，自动生成样本代码。&lt;br>
使用方法：&lt;/p></description></item><item><title>MAUI-依赖注入</title><link>http://lestua.eu.org/notes/2022/09/05/223231/</link><pubDate>Mon, 05 Sep 2022 22:27:31 +0800</pubDate><guid>http://lestua.eu.org/notes/2022/09/05/223231/</guid><description>&lt;h1 id="依赖注入使用">依赖注入使用&lt;/h1>
&lt;p>当某个角色需要另一个角色的协助时，在&lt;strong>传统&lt;/strong>的程序设计过程中，通常由调用者来创建被调用者的实例。所谓&lt;strong>依赖注入&lt;/strong>，是指程序运行过程中，如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部的注入。&lt;br>
当创建完成&lt;em>MonkeyService&lt;/em>服务：&lt;/p></description></item><item><title>MAUI跨平台基础认识</title><link>http://lestua.eu.org/notes/2022/08/29/223220/</link><pubDate>Mon, 29 Aug 2022 22:32:20 +0800</pubDate><guid>http://lestua.eu.org/notes/2022/08/29/223220/</guid><description>&lt;p>&lt;em>XXX.xaml&lt;/em>：通常为布局代码&lt;br>
&lt;em>XXX.xaml.cs&lt;/em>：通常为逻辑相关代码，被称为&lt;strong>代码隐藏&lt;/strong>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;blockquote>
&lt;p>[!info]&lt;br>
结合MAUI提供的基础模板来了解MAUI基础样貌&lt;/p></description></item><item><title>MAUI-模型与视图</title><link>http://lestua.eu.org/notes/2022/08/29/223105/</link><pubDate>Mon, 29 Aug 2022 16:30:23 +0800</pubDate><guid>http://lestua.eu.org/notes/2022/08/29/223105/</guid><description>&lt;p>依照&lt;a href="https://github.com/dotnet-presentations/dotnet-maui-workshop">MAUI官方实验&lt;/a>简述，该实验所实现的最终成果应用，名为&lt;em>MonkeyFinder&lt;/em>。&lt;/p>
&lt;p>在&lt;em>Model&lt;/em>文件夹下创建一个Model，如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Monkey&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Name { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Location { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Details { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Image { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> Population { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> Latitude { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> Longitude { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Monkey&lt;/em>类具备属性，也可以具备方法。&lt;br>
在视图，即布局文件中加入&lt;code>xmlns:model=&amp;quot;clr-namespace:MonkeyFinder.Model&amp;quot;&lt;/code>命名空间，这将允许我们引用上面的 &lt;em>Monkey&lt;/em> 类来进行数据绑定。&lt;br>
以硬编码方式创建视图以展示数据，如在 MainPage.xaml 的 &lt;code>ContentPage&lt;/code> 中添加：&lt;/p></description></item><item><title>MAUI基本项目认识</title><link>http://lestua.eu.org/notes/2022/08/29/223215/</link><pubDate>Thu, 25 Aug 2022 22:44:00 +0800</pubDate><guid>http://lestua.eu.org/notes/2022/08/29/223215/</guid><description>&lt;h1 id="项目经典架构">项目经典架构&lt;/h1>
&lt;p>MVVM架构在移动客户端的设计中大行其道，MAUI也以此为经典架构。&lt;br>
项目文件为后缀为csproj。在VS的解决方案视图下显示为一个可扩展层级，其下包含子文件夹，在架构层面有&lt;/p></description></item></channel></rss>